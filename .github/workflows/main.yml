name: Build and deploy Angular app to IIS server

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: windows-latest  # Use 'windows-latest' for a Windows environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli  # Install Angular CLI globally

      - name: Install dependencies
        run: npm install  # Install dependencies defined in package.json

      - name: Build Angular project
        run: ng build --configuration production  # Build Angular project with production config

      - name: Upload build artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: angular-build
          path: dist/timedashboard  # Path to your Angular build output directory

  deploy:
    runs-on: self-hosted  # Use a self-hosted runner for deployment
    needs: build  # Ensure the build step is successful before starting the deployment
    steps:
      - name: Download build artifacts from GitHub
        uses: actions/download-artifact@v3
        with:
          name: angular-build  # Name of the uploaded artifact

      - name: Deploy to IIS
        shell: powershell
        run: |
          # Define paths and IIS settings dynamically
          $sourcePath = "${{ github.workspace }}\browser"  # Replace with the actual artifact path
          $destinationPath = "C:\Kesava\web\timer"
          $siteName = "newtimer.com"  # IIS site name
          $appPoolName = "TimerAppPool"  # Application pool name
          $bindingInfo = "*:80:timer.local"  # Replace with your actual binding info
          $appPoolPath = "IIS:\AppPools\$appPoolName"

          # Create the destination directory if it doesn't exist
          if (-Not (Test-Path $destinationPath)) {
              New-Item -ItemType Directory -Path $destinationPath -Force
          }

          # Copy the files to the destination
          Copy-Item -Path "$sourcePath\*" -Destination $destinationPath -Recurse -Force

          # Import the WebAdministration module
          try {
              Import-Module -Name WindowsCompatibility -ErrorAction Stop
              Import-WinModule -Name WebAdministration
              Write-Output "WebAdministration module loaded successfully in compatibility mode."
          } catch {
              Write-Error "Failed to import the WebAdministration module in compatibility mode."
              exit 1
          }

          # Ensure the IIS drive is available
          try {
              if (-Not (Get-PSDrive -Name IIS -ErrorAction SilentlyContinue)) {
                  Write-Output "Loading WebAdministration module..."
                  Import-Module WebAdministration -ErrorAction Stop
              }
              if (-Not (Get-PSDrive -Name IIS -ErrorAction SilentlyContinue)) {
                  Write-Error "The IIS drive is not available. Ensure IIS is installed and the WebAdministration module is loaded."
                  exit 1
              }
          } catch {
              Write-Error "Failed to load the WebAdministration module: $_"
              exit 1
          }

          # Check and manage the application pool
          try {
              if (Test-Path $appPoolPath) {
                  # Application pool exists, update its properties
                  Write-Output "Accessing the existing application pool: $appPoolName"
                  Set-ItemProperty -Path $appPoolPath -Name "managedPipelineMode" -Value "Integrated"
                  Write-Output "Updated the existing application pool: $appPoolName"
              } else {
                  # Create a new application pool
                  Write-Output "Creating a new application pool: $appPoolName"
                  New-WebAppPool -Name $appPoolName -Force
                  Set-ItemProperty -Path $appPoolPath -Name "managedPipelineMode" -Value "Integrated"
                  Write-Output "Created a new application pool: $appPoolName"
              }
          } catch {
              # Handle errors
              Write-Error "An error occurred while managing the application pool: $_"
              exit 1
          }
