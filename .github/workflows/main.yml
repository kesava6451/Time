name: Build and deploy Angular app to IIS server

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: windows-latest  # You can use 'windows-latest' for a Windows environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli  # Install Angular CLI globally

      - name: Install dependencies
        run: npm install  # Install dependencies defined in package.json

      - name: Build Angular project
        run: ng build --configuration production  # Build Angular project with production config

      - name: Upload build artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: angular-build
          path: dist/timedashboard  # Path to your Angular build output directory

  deploy:
    runs-on: self-hosted  # Use a self-hosted runner for deployment
    needs: build  # Ensure the build step is successful before starting the deployment
    steps:
      - name: Download build artifacts from GitHub
        uses: actions/download-artifact@v3
        with:
          name: angular-build  # Name of the uploaded artifact

      - name: Deploy to IIS
        run: |
          # Define paths and IIS settings dynamically
          $sourcePath = "${{ github.workspace }}\browser"  # This dynamically points to the downloaded artifact
          $destinationPath = "C:\Kesava\web\timer"
          $siteName = "newtimer.com"  # IIS site name
          $appPoolName = "TimerAppPool"  # Application pool name
          $bindingInfo = "*:80:timer.local"  # Replace with your actual binding info

          # Create the destination directory if it doesn't exist
          if (-Not (Test-Path $destinationPath)) {
            New-Item -ItemType Directory -Path $destinationPath
          }

          # Copy the files to the destination
          Copy-Item -Path "$sourcePath\*" -Destination $destinationPath -Recurse -Force

          # Import the WebAdministration module
          if (-Not (Get-Module -Name WebAdministration -ListAvailable)) {
              Write-Error "The WebAdministration module is not available. Ensure IIS is installed with scripting tools."
              exit 1
          }
          Import-Module WebAdministration


          # Check if the application pool exists, if not, create it
          if (-Not (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue)) {
            New-WebAppPool -Name $appPoolName
            Set-ItemProperty IIS:\AppPools\$appPoolName -Name "managedPipelineMode" -Value "Integrated"  # Ensure Integrated Mode
          }

          # Check if the site exists, if not, create it
          if (-Not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
            New-Website -Name $siteName -PhysicalPath $destinationPath -ApplicationPool $appPoolName -BindingInformation $bindingInfo
          } else {
            # Update the site's physical path and application pool if it already exists
            Set-ItemProperty IIS:\Sites\$siteName -Name "physicalPath" -Value $destinationPath
            Set-ItemProperty IIS:\Sites\$siteName -Name "applicationPool" -Value $appPoolName
          }

          # Verify or add the URL binding
          $bindings = (Get-Item "IIS:\Sites\$siteName").bindings.Collection
          $bindingExists = $false
          foreach ($binding in $bindings) {
            if ($binding.bindingInformation -eq $bindingInfo) {
              $bindingExists = $true
              break
            }
          }
          if (-Not $bindingExists) {
            New-WebBinding -Name $siteName -IPAddress "*" -Port 80 -HostHeader "timer.local"
          }

          # Restart IIS to reflect changes
          iisreset
