name: Build and Deploy Angular App to IIS Server

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli

      - name: Install dependencies
        run: npm install

      - name: Build Angular project
        run: ng build --configuration production

      - name: Upload build artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: angular-build
          path: dist/timedashboard

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Download build artifacts from GitHub
        uses: actions/download-artifact@v3
        with:
          name: angular-build

      - name: Copy build files to IIS directory
        shell: powershell
        run: |
          # Define source and destination paths
          $sourcePath = "${{ github.workspace }}\browser"
          $destinationPath = "C:\Kesava\Web\Timer"

          # Check if the source path exists
          if (-Not (Test-Path $sourcePath)) {
              Write-Error "Source path $sourcePath does not exist. Verify the build process."
              exit 1
          }

          # Create the destination directory if it doesn't exist
          if (-Not (Test-Path $destinationPath)) {
              Write-Host "Creating destination directory: $destinationPath"
              New-Item -ItemType Directory -Path $destinationPath -Force
          }

          # Copy files to the destination
          Write-Host "Copying files from $sourcePath to $destinationPath"
          Copy-Item -Path "$sourcePath\*" -Destination $destinationPath -Recurse -Force

      - name: Deploy to IIS
        shell: powershell
        run: |
          Import-Module WebAdministration

          # IIS site configuration
          $siteName = 'TimeApp'
          $physicalPath = 'C:\Kesava\Web\Timer'
          $port = 88

          # Validate physical path exists
          if (-Not (Test-Path $physicalPath)) {
              Write-Error "Physical path $physicalPath does not exist. Verify the folder structure."
              exit 1
          }

          # Check if the IIS site exists
          if (!(Get-Website | Where-Object { $_.Name -eq $siteName })) {
              Write-Host "Creating new IIS site: $siteName on port $port"
              New-Website -Name $siteName -PhysicalPath $physicalPath -Port $port -ApplicationPool 'DefaultAppPool'
          } else {
              Write-Host "Updating existing IIS site: $siteName"
              Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $physicalPath

              # Check and add binding if it doesn't exist
              $bindingExists = Get-WebBinding -Name $siteName | Where-Object { $_.bindingInformation -eq "*:${port}:*" }
              if (-Not $bindingExists) {
                  Write-Host "Adding binding for port $port"
                  New-WebBinding -Name $siteName -Protocol http -IPAddress * -Port $port
              } else {
                  Write-Host "Binding for port $port already exists. Skipping binding creation."
              }
          }

          # Ensure the application pool is running
          $appPoolName = 'DefaultAppPool'
          if ((Get-WebAppPoolState -Name $appPoolName).Value -ne 'Started') {
              Write-Host "Starting application pool: $appPoolName"
              Start-WebAppPool -Name $appPoolName
          }

          # Start the IIS site
          Write-Host "Starting IIS site: $siteName"
          Start-Website -Name $siteName

          Write-Host "Deployment complete. Site $siteName is running on port $port."
