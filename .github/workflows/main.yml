name: Build and deploy Angular app to IIS server

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: windows-latest  # You can use 'windows-latest' for a Windows environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli  # Install Angular CLI globally

      - name: Install dependencies
        run: npm install  # Install dependencies defined in package.json

      - name: Build Angular project
        run: ng build --configuration production  # Build Angular project with production config

      - name: Upload build artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: angular-build
          path: dist/timedashboard  # Path to your Angular build output directory

  deploy:
    runs-on: self-hosted  # Use a self-hosted runner for deployment
    needs: build  # Ensure the build step is successful before starting the deployment
    steps:
      - name: Download build artifacts from GitHub
        uses: actions/download-artifact@v3
        with:
          name: angular-build  # Name of the uploaded artifac

      - name: Deploy to IIS
        shell: pwsh
        run: |
          Start-Process powershell -ArgumentList '-NoProfile', '-ExecutionPolicy', 'Bypass', '-Command', "
          # Define paths and IIS settings dynamically
          Import-Module WebAdministration -SkipEditionCheck
          $sourcePath = "C:\Agent\actions-runner\_work\Time\Time\browser"  # Replace with the actual artifact path
          $destinationPath = "C:\Kesava\web\timer"
          $siteName = "newtimer.com"  # IIS site name
          $appPoolName = "TimerAppPool"  # Application pool name
          $bindingInfo = "*:80:timer.local"  # Replace with your actual binding info

          # Create the destination directory if it doesn't exist
          if (-Not (Test-Path $destinationPath)) {
              New-Item -ItemType Directory -Path $destinationPath -Force
          }

          # Copy the files to the destination
          Copy-Item -Path "$sourcePath\*" -Destination $destinationPath -Recurse -Force

          # Check if the site exists
          if (!(Get-Website | Where-Object { $_.Name -eq $siteName })) {
          Write-Host 'Creating new IIS site: $siteName'
          New-Website -Name $siteName -PhysicalPath $destinationPath -ApplicationPool 'DefaultAppPool'
          } else {
          Write-Host 'IIS site $siteName already exists. Updating physical path.'
          Set-ItemProperty 'IIS:\Sites\$siteName' -Name physicalPath -Value $physicalPath
          }

          # Ensure the site is running
          Start-Website -Name $siteName
          " -Verb RunAs -Wait
