name: Build and deploy Angular app to IIS server

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: windows-latest  # You can use 'windows-latest' for a Windows environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli  # Install Angular CLI globally

      - name: Install dependencies
        run: npm install  # Install dependencies defined in package.json

      - name: Build Angular project
        run: ng build --configuration production  # Build Angular project with production config

      - name: Upload build artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: angular-build
          path: dist/timedashboard  # Path to your Angular build output directory

  deploy:
    runs-on: self-hosted  # Use a self-hosted runner for deployment
    needs: build  # Ensure the build step is successful before starting the deployment
    steps:
      - name: Download build artifacts from GitHub
        uses: actions/download-artifact@v3
        with:
          name: angular-build  # Name of the uploaded artifact

      - name: Deploy to IIS
        shell: pwsh
        run: |
          # Define paths and IIS settings dynamically
          $sourcePath = "C:\Agent\actions-runner\_work\Time\Time\browser"  # Replace with the actual artifact path
          $destinationPath = "C:\Kesava\web\timer"
          $siteName = "newtimer.com"  # IIS site name
          $appPoolName = "TimerAppPool"  # Application pool name
          $bindingInfo = "*:80:timer.local"  # Replace with your actual binding info

          # Create the destination directory if it doesn't exist
          if (-Not (Test-Path $destinationPath)) {
              New-Item -ItemType Directory -Path $destinationPath -Force
          }

          # Copy the files to the destination
          Copy-Item -Path "$sourcePath\*" -Destination $destinationPath -Recurse -Force

          # # Import the WebAdministration module using WindowsCompatibility
          # try {
          #     Import-WinModule WebAdministration -ErrorAction Stop
          # } catch {
          #     Write-Error "Failed to import the WebAdministration module. Ensure IIS scripting tools are installed."
          #     exit 1
          # }

          # # Verify the IIS drive is available
          # if (-Not (Get-PSDrive -Name IIS -ErrorAction SilentlyContinue)) {
          #     Write-Error "The IIS drive is not available. Ensure IIS is properly configured."
          #     exit 1
          # }

          # Check if the application pool exists, if not, create it
          $appPoolPath = "IIS:\ApplicationPools\$appPoolName"
          if (-Not (Test-Path $appPoolPath)) {
              New-WebAppPool -Name $appPoolName
              Set-ItemProperty -Path $appPoolPath -Name "managedPipelineMode" -Value "Integrated"  # Ensure Integrated Mode
          }

          # Check if the site exists, if not, create it
          $sitePath = "IIS:\Sites\$siteName"
          if (-Not (Test-Path $sitePath)) {
              New-Website -Name $siteName -PhysicalPath $destinationPath -ApplicationPool $appPoolName -BindingInformation $bindingInfo
          } else {
              # Update the site's physical path and application pool if it already exists
              Set-ItemProperty -Path $sitePath -Name "physicalPath" -Value $destinationPath
              Set-ItemProperty -Path $sitePath -Name "applicationPool" -Value $appPoolName
          }

          # Verify or add the URL binding
          $bindings = (Get-Item $sitePath).bindings.Collection
          $bindingExists = $false
          foreach ($binding in $bindings) {
              if ($binding.bindingInformation -eq $bindingInfo) {
                  $bindingExists = $true
                  break
              }
          }
          if (-Not $bindingExists) {
              New-WebBinding -Name $siteName -IPAddress "*" -Port 80 -HostHeader "timer.local"
          }

          # Restart IIS to apply changes
          iisreset
